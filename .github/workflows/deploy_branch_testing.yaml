name: Deploy your branch for testing

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Please, enter your name and surname'
        default: 'Иван Иванов'
        required: true

env:
  REGISTRY: ghcr.io
  ORGANIZATION: studio-yandex-practicum
  REPOSITORY_NAME: lubimovka_backend

defaults:
  run:
    working-directory: .

jobs:
  # tests:
  #     name: Run tests
  #     runs-on: ubuntu-latest
  #     steps:
  #     -
  #       name: Check out the repo
  #       uses: actions/checkout@v2
  #     -
  #       name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.9
  #     -
  #       name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements/dev.txt
  #     -
  #       name: Test with pytest
  #       run: pytest
  build-and-push-image-to-github-packages:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    # needs: tests
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --file Dockerfile --tag $REPOSITORY_NAME --label "runnumber=${GITHUB_RUN_ID}"
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=$REGISTRY/${{ github.repository_owner }}/$REPOSITORY_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $REPOSITORY_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  deploy_testing_branch:
    name: Deploy branch for testing in the server
    runs-on: ubuntu-latest
    needs: build-and-push-image-to-github-packages
    steps:
      - name: Getting docker image name and tag, write in environment
        run: |
          IMAGE=$REGISTRY/${{ github.repository_owner }}/$REPOSITORY_NAME
          IMAGE=$(echo $IMAGE | tr '[A-Z]' '[a-z]')
          IMAGE_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && IMAGE_TAG=$(echo $IMAGE_TAG | sed -e 's/^v//')

          echo IMAGE=$IMAGE >> $GITHUB_ENV
          echo IMAGE_TAG=$IMAGE_TAG >> $GITHUB_ENV
      -
        name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd education/${{ github.event.repository.name }}
            echo ${{ github.event.repository.name }}
            git pull
            ./check_env_script.sh .env_branch_testing

            # Github package name: reading and writing in .env
            echo "IMAGE=${{ env.IMAGE }}" >> .env_branch_testing
            echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> .env_branch_testing

            # PostgreSQL variables: reading and writing Github secrets in .env_branch_testing
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env_branch_testing
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env_branch_testing
            echo POSTGRES_DB_TEST=${{ secrets.POSTGRES_DB_TEST }} >> .env_branch_testing
            echo POSTGRES_USER_TEST=${{ secrets.POSTGRES_USER_TEST }} >> .env_branch_testing
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env_branch_testing

            # Django variables: reading and writing Github secrets in .env_branch_testing
            echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> .env_branch_testing
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env_branch_testing
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env_branch_testing
            echo DJANGO_EMAIL_BACKEND=${{ secrets.DJANGO_EMAIL_BACKEND }} >> .env_branch_testing
            echo DJANGO_DEFAULT_FROM_EMAIL=${{ secrets.DJANGO_DEFAULT_FROM_EMAIL }} >> .env_branch_testing
            echo DJANGO_SERVER_EMAIL=${{ secrets.DJANGO_SERVER_EMAIL }} >> .env_branch_testing
            echo DJANGO_EMAIL_SUBJECT_PREFIX=${{ secrets.DJANGO_EMAIL_SUBJECT_PREFIX }} >> .env_branch_testing
            echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .env_branch_testing
            echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env_branch_testing
            echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env_branch_testing
            echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> .env_branch_testing

            # Swag-nginx variables: reading and writing Github secrets in .env
            echo PUID=$(id -u) >> .env_branch_testing
            echo PGID=$(id -g) >> .env_branch_testing
            echo URL=${{ secrets.SITE_URL }} >> .env_branch_testing
            echo CERTPROVIDER=zerossl >> .env_branch_testing
            echo EMAIL=${{ secrets.URL_TEST }} >> .env_branch_testing

            # Pull docker image from github packages with tag develop
            docker pull ${{ env.IMAGE }}:${{ env.IMAGE_TAG }}

            # re-run backend docker container
            sudo docker-compose -f test_branch_deploy.yaml down
            sudo docker-compose -f test_branch_deploy.yaml up -d
  # # greet:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #   # Runs a single command using the runners shell
  #   - name: Send greeting
  #     run: |
  #       echo "Hello ${{ github.event.inputs.name }}"
  #       echo ${{ github.ref }}
