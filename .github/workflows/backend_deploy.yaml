name: develop backend build and deploy

# on:
#   push:
#     branches:
#       - develop

# env:
#   REGISTRY: ghcr.io
#   ORGANIZATION: studio-yandex-practicum
#   IMAGE_NAME: lubimovka_backend

# defaults:
#   run:
#     working-directory: .

# jobs:
#   tests:
#     name: Run tests
#     runs-on: ubuntu-latest
#     steps:
#     -
#       name: Check out the repo
#       uses: actions/checkout@v2
#     -
#       name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: 3.9
#     -
#       name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements/dev.txt
#     -
#       name: Test with pytest
#       run: pytest

#   build-and-push-image-to-github-packages:
#     name: Push Docker image to GitHub Packages
#     runs-on: ubuntu-latest
#     needs: tests
#     permissions:
#       contents: read
#       packages: write
#     steps:
#       - uses: actions/checkout@v2
#       - name: Build image
#         run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
#       - name: Log in to registry
#         run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
#       - name: Push image
#         run: |
#           IMAGE_ID=$REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME

#           # Change all uppercase to lowercase
#           IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

#           # Strip git ref prefix from version
#           VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

#           # Strip "v" prefix from tag name
#           [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

#           # Use Docker `latest` tag convention
#           [ "$VERSION" == "master" ] && VERSION=latest
#           echo IMAGE_ID=$IMAGE_ID
#           echo VERSION=$VERSION

#           docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
#           docker push $IMAGE_ID:$VERSION

#   deploy:
#     name: Deploy changes on server
#     runs-on: ubuntu-latest
#     needs: build-and-push-image-to-github-packages
#     steps:
#       -
#         name: executing remote ssh commands to deploy
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           passphrase: ${{ secrets.PASSPHRASE }}
#           script: |
#             cd ${{ github.event.repository.name }}
#             git pull
#             ./check_env_script.sh

#             # PostgreSQL variables: reading and writing Github secrets in .env
#             echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
#             echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
#             echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
#             echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
#             echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env

#             # Django variables: reading and writing Github secrets in .env
#             echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> .env
#             echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
#             echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .env
#             echo DJANGO_EMAIL_BACKEND=${{ secrets.DJANGO_EMAIL_BACKEND }} >> .env
#             echo DJANGO_DEFAULT_FROM_EMAIL=${{ secrets.DJANGO_DEFAULT_FROM_EMAIL }} >> .env
#             echo DJANGO_SERVER_EMAIL=${{ secrets.DJANGO_SERVER_EMAIL }} >> .env
#             echo DJANGO_EMAIL_SUBJECT_PREFIX=${{ secrets.DJANGO_EMAIL_SUBJECT_PREFIX }} >> .env
#             echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .env
#             echo EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }} >> .env
#             echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env
#             echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> .env

#             # Swag-nginx variables: reading and writing Github secrets in .env
#             echo PUID=$(id -u) >> .env
#             echo PGID=$(id -g) >> .env
#             echo URL=${{ secrets.SITE_URL }} >> .env
#             echo CERTPROVIDER=zerossl >> .env
#             echo EMAIL=${{ secrets.SSL_EMAIL }} >> .env

#             # Pull docker image from github packages with tag develop
#             docker pull ${{env.REGISTRY}}/${{env.ORGANIZATION}}/${{env.IMAGE_NAME}}:develop

#             # re-run backend docker container
#             sudo docker-compose -f develop_deploy.yaml down
#             sudo docker-compose -f develop_deploy.yaml up -d

#   send_message:
#     name: Send message in telegram group
#     runs-on: ubuntu-latest
#     needs: deploy
#     steps:
#       - name: check repository
#         uses: actions/checkout@v1
#       - name: find the PR associated with this push, if there is one
#         uses: jwalton/gh-find-current-pr@v1
#         id: findPr
#         with:
#           state: closed
#       - run: echo "PR=${PR}" >> $GITHUB_ENV
#         if: success() && steps.findPr.outputs.number
#         env:
#           PR: ${{ steps.findPr.outputs.pr }}
#       - name: send message
#         uses: appleboy/telegram-action@master
#         with:
#           to: ${{ secrets.TELEGRAM_ID }}
#           token: ${{ secrets.TELEGRAM_TOKEN }}
#           message: |
#                   Код на сервере разработки обновлён!

#                   Изменения можно посмотреть в PR:
#                   https://github.com/${{ github.repository }}/pull/${{env.PR}}

#                   Сcылка на документацию в Swagger:
#                   https://lubimovka.kiryanov.ru/api/schema/swagger-ui/

#                   Панель администратора:
#                   https://lubimovka.kiryanov.ru/admin/
