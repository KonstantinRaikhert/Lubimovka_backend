name: develop backend build and deploy

concurrency:
  group: deploy_vps
  cancel-in-progress: true

on:
  # push:
  #   branches:
  #     - develop
  push:
    branches:
      - '**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: lubimovka_backend

defaults:
  run:
    working-directory: .

jobs:
  # tests:
  #   name: Run tests
  #   runs-on: ubuntu-latest
  #   steps:
  #   -
  #     name: Check out the repo
  #     uses: actions/checkout@v2
  #   -
  #     name: Set up Python
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.9
  #   -
  #     name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements/dev.txt
  #   -
  #     name: Test with pytest
  #     run: pytest

  # build-and-push-image-to-github-packages:
  #   name: Push Docker image to GitHub Packages
  #   runs-on: ubuntu-latest
  #   needs: tests
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Build image
  #       run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
  #     - name: Log in to registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #     - name: Push image
  #       run: |
  #         IMAGE_ID=$REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "master" ] && VERSION=latest
  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION

  deploy:
    name: Deploy changes on server
    runs-on: ubuntu-latest
    environment:
      name: deploy_vps
      url: ${{ secrets.SITE_URL }}
    # needs: build-and-push-image-to-github-packages
    steps:
      # -
      #   name: Getting docker image name and tag, write in environment
      #   run: |
      #     IMAGE=$REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME
      #     IMAGE=$(echo $IMAGE | tr '[A-Z]' '[a-z]')
      #     IMAGE_TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
      #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && IMAGE_TAG=$(echo $IMAGE_TAG | sed -e 's/^v//')

      #     echo IMAGE=$IMAGE >> $GITHUB_ENV
      #     echo IMAGE_TAG=$IMAGE_TAG >> $GITHUB_ENV
      -
        name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ${{ github.event.repository.name }}
            # git pull
            cd infra_deploy
            chmod +x check_env_script.sh
            ./check_env_script.sh test

            # Github package name: writing in .env to read in docker-compose script
            # ./check_env_script.sh .github_image
            # echo "IMAGE=${{ env.IMAGE }}" >> .github_image
            # echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> .github_image
            # source .github_image
            # export IMAGE
            # export IMAGE_TAG

            # PostgreSQL variables: reading and writing Github secrets in test
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> test
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> test
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> test
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> test
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> test

            # Django variables: reading and writing Github secrets in test
            echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> test
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> test
            echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> test

            echo DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_SUPERUSER_USERNAME }} >> test
            echo DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_SUPERUSER_EMAIL }} >> test
            echo DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }} >> test

            echo DJANGO_EMAIL_BACKEND=${{ secrets.DJANGO_EMAIL_BACKEND }} >> test
            echo DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }} >> test
            echo SERVER_EMAIL=${{ secrets.SERVER_EMAIL }} >> test
            echo MAILJET_API_KEY=${{ secrets.MAILJET_API_KEY }} >> test
            echo MAILJET_SECRET_KEY=${{ secrets.MAILJET_SECRET_KEY }} >> test

            # Swag-nginx variables: reading and writing Github secrets in test
            echo PUID=$(id -u) >> test
            echo PGID=$(id -g) >> test
            echo URL=${{ secrets.SITE_URL }} >> test
            echo EMAIL=${{ secrets.SSL_EMAIL }} >> test

            # Pull docker image from github packages with tag
            # docker pull ${{ env.IMAGE }}:${{ env.IMAGE_TAG }}

            # re-run docker containers
            # docker-compose -f test_branch_deploy.yaml down
            # docker-compose -f develop_deploy.yaml down
            # docker-compose -f develop_deploy.yaml up -d
            # docker-compose -f test_branch_deploy.yaml up -d

  send_message:
    name: Send message in telegram group
    runs-on: ubuntu-latest
    environment:
      name: success_message
    needs: deploy
    steps:
      - name: check repository
        uses: actions/checkout@v1
      # - name: find the PR associated with this push, if there is one
      #   uses: jwalton/gh-find-current-pr@v1
      #   id: findPr
      #   with:
      #     state: closed
      # - run: echo "PR=${PR}" >> $GITHUB_ENV
      #   if: success() && steps.findPr.outputs.number
      #   env:
      #     PR: ${{ steps.findPr.outputs.pr }}
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
                  Тестирование
                  ${{ secrets.HUB_URL }}/${{ github.repository }}/tree/${{ github.ref_name }}

                  Сcылка на документацию в Swagger:
                  ${{ secrets.SWAGGER_URL }}

                  Панель администратора:
                  ${{ secrets.ADMIN_URL }}
